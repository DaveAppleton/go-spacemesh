syntax = "proto3";
package pb;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

message SimpleMessage {
    string value = 1;
}

message TxConfirmation {
    string value = 1;
    string id = 2;
}

enum TxStatus {
    REJECTED = 0;
    //INSUFFICIENT_FUNDS = 1;
    //CONFLICTING = 2;
    PENDING = 3;
    //PROCESSING = 4;
    //APPROVED = 5;
    CONFIRMED = 6;
}

message TransactionId {
    bytes id = 1;
}

message Transaction {
    TransactionId txId = 1;
    AccountId sender = 2;
    AccountId receiver = 3;
    uint64 amount = 4;
    uint64 fee = 5;
    TxStatus status = 6;
    uint64 layerId = 7;
    uint64 timestamp = 8;
}

message AccountId {
    string address = 1;
}

message TransferFunds {
    AccountId sender = 1;
    AccountId receiver = 2;
    uint64 nonce = 3;
    uint64 amount = 4;
}

message InitPost {
    string logicalDrive = 1;
    uint64 commitmentSize = 2;
    string coinbase = 3;
}

message NodeConfigParams {
     bool TestMode = 1;
     uint32 LayerDurationSec = 2;
     uint32 LayerAvgSize = 3;
     uint32 LayersPerEpoch = 4;
     uint32 Hdist = 5;
     string PoETServer = 6;
     uint32 SyncRequestTimeout = 7;
     uint32 AtxsPerBlock = 8;
     bool bootstrap = 9;
     repeated string BootstrapNodes = 10;
     uint32 Randcon = 11;
     uint32 MaxInbound = 12;
     uint32 HareWakeupDelta = 13;
     uint32 HareRoundDuration = 14;
     uint32 HareCommitteeSize = 15;
     uint32 HareMaxAdversaries = 16;
     uint32 EligibilityConf = 17;
     uint32 EligibilityEpochOffset = 18;
     uint32 GenesisActiveSize = 19;
     uint64 PostSize = 20;
     uint64 PostLabels = 21;
     string GenesisTime = 22;
     uint32 NetworkId = 23;
}

message SignedTransaction {
    bytes tx = 1; // serialized with XDR
}

message EligibleLayers {
    repeated uint64 layers = 1;
}

message BroadcastMessage {
    string data = 1;
}

message BinaryMessage {
    bytes data = 1;
}

message CommitmentSizeMessage {
    uint64 mbCommitted = 1;
}

message LogicalDriveMessage {
    string logicalDrive = 1;
}

message MiningStats {
    string dataDir = 1;
    int32 status = 2;
    string coinbase = 3;
}

message SetLogLevel {
    string loggerName = 1;
    string severity = 2;
}

message AccountTxs {
    repeated string txs = 1;
    uint64 validatedLayer = 2;
}

message GetTxsSinceLayer {
    uint64 startLayer = 1;
    AccountId account = 3;
}

message Reward {
    uint64 layer = 1;
    uint64 totalReward = 2;
    uint64 layerRewardEstimate = 3;
    // totalReward - layerRewardEstimate = feesEstimate
}

message AccountRewards {
    repeated Reward rewards = 1;
}

service SpacemeshService {

    rpc GetNodeParams (google.protobuf.Empty) returns (NodeConfigParams) {
        option (google.api.http) = {
              post: "/v1/nodeparams"
              body: "*"
            };
    }
    rpc Echo (SimpleMessage) returns (SimpleMessage) {
        option (google.api.http) = {
          post: "/v1/example/echo"
          body: "*"
        };
    }
    rpc GetNonce (AccountId) returns (SimpleMessage) {
        option (google.api.http) = {
          post: "/v1/nonce"
          body: "*"
        };
    }
    rpc GetBalance (AccountId) returns (SimpleMessage) {
        option (google.api.http) = {
          post: "/v1/balance"
          body: "*"
        };
    }
    rpc StartMining (InitPost) returns (SimpleMessage) {
        option (google.api.http) = {
          post: "/v1/startmining"
          body: "*"
        };
    }
    rpc GetTransaction (TransactionId) returns (Transaction) {
        option (google.api.http) = {
          post: "/v1/gettransaction"
          body: "*"
        };
    }
    rpc SubmitTransaction (SignedTransaction) returns (TxConfirmation) {
        option (google.api.http) = {
          post: "/v1/submittransaction"
          body: "*"
        };
    }
    rpc Broadcast (BroadcastMessage) returns (SimpleMessage) {
        option (google.api.http) = {
          post: "/v1/broadcast"
          body: "*"
        };
    }
    rpc BroadcastPoet (BinaryMessage) returns (SimpleMessage) {
        option (google.api.http) = {
          post: "/v1/broadcastpoet"
          body: "*"
        };
    }
    rpc SetAwardsAddress (AccountId) returns (SimpleMessage) {
        option (google.api.http) = {
          post: "/v1/setawardsaddr"
          body: "*"
        };
    }
    rpc GetMiningStats (google.protobuf.Empty) returns (MiningStats) {
        option (google.api.http) = {
          post: "/v1/stats"
          body: "*"
        };
    }
    rpc GetGenesisTime (google.protobuf.Empty) returns (SimpleMessage) {
        option (google.api.http) = {
          post: "/v1/genesis"
          body: "*"
        };
    }
    rpc GetUpcomingAwards (google.protobuf.Empty) returns (EligibleLayers) {
        option (google.api.http) = {
          post: "/v1/getupcomingawards"
          body: "*"
        };
    }
    rpc SetLoggerLevel (SetLogLevel) returns (SimpleMessage) {
        option (google.api.http) = {
          post: "/v1/loggerlevel"
          body: "*"
        };
    }
    rpc GetAccountTxs (GetTxsSinceLayer) returns (AccountTxs) {
        option (google.api.http) = {
          post: "/v1/accounttxs"
          body: "*"
        };
    }
    rpc GetAccountRewards (AccountId) returns (AccountRewards) {
        option (google.api.http) = {
          post: "/v1/accountrewards"
          body: "*"
        };
    }
    rpc ResetPost (google.protobuf.Empty) returns (SimpleMessage) {
        option (google.api.http) = {
          post: "/v1/resetpost"
          body: "*"
        };
    }
    rpc GetStateRoot (google.protobuf.Empty) returns (SimpleMessage) {
        option (google.api.http) = {
          post: "/v1/stateroot"
          body: "*"
        };
    }
}

